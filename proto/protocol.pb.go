// Code generated by protoc-gen-go.
// source: protocol.proto
// DO NOT EDIT!

/*
Package protocol is a generated protocol buffer package.

It is generated from these files:
	protocol.proto

It has these top-level messages:
	Req
	Res
	ReqStream
	ResStream
*/
package protocol

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ResStream_Cmd int32

const (
	ResStream_SEND      ResStream_Cmd = 0
	ResStream_REPLY     ResStream_Cmd = 1
	ResStream_BROADCAST ResStream_Cmd = 2
)

var ResStream_Cmd_name = map[int32]string{
	0: "SEND",
	1: "REPLY",
	2: "BROADCAST",
}
var ResStream_Cmd_value = map[string]int32{
	"SEND":      0,
	"REPLY":     1,
	"BROADCAST": 2,
}

func (x ResStream_Cmd) String() string {
	return proto.EnumName(ResStream_Cmd_name, int32(x))
}
func (ResStream_Cmd) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{3, 0} }

type Req struct {
	Msg string `protobuf:"bytes,1,opt,name=msg" json:"msg,omitempty"`
}

func (m *Req) Reset()                    { *m = Req{} }
func (m *Req) String() string            { return proto.CompactTextString(m) }
func (*Req) ProtoMessage()               {}
func (*Req) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type Res struct {
	Msg string `protobuf:"bytes,1,opt,name=msg" json:"msg,omitempty"`
}

func (m *Res) Reset()                    { *m = Res{} }
func (m *Res) String() string            { return proto.CompactTextString(m) }
func (*Res) ProtoMessage()               {}
func (*Res) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type ReqStream struct {
	Version int32  `protobuf:"varint,1,opt,name=version" json:"version,omitempty"`
	Topic   string `protobuf:"bytes,2,opt,name=topic" json:"topic,omitempty"`
	Event   string `protobuf:"bytes,3,opt,name=event" json:"event,omitempty"`
	ReqId   string `protobuf:"bytes,4,opt,name=reqId" json:"reqId,omitempty"`
	ConnId  string `protobuf:"bytes,5,opt,name=connId" json:"connId,omitempty"`
	Data    []byte `protobuf:"bytes,6,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *ReqStream) Reset()                    { *m = ReqStream{} }
func (m *ReqStream) String() string            { return proto.CompactTextString(m) }
func (*ReqStream) ProtoMessage()               {}
func (*ReqStream) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type ResStream struct {
	Version int32         `protobuf:"varint,1,opt,name=version" json:"version,omitempty"`
	Topic   string        `protobuf:"bytes,2,opt,name=topic" json:"topic,omitempty"`
	Event   string        `protobuf:"bytes,3,opt,name=event" json:"event,omitempty"`
	ReqId   string        `protobuf:"bytes,4,opt,name=reqId" json:"reqId,omitempty"`
	ConnId  string        `protobuf:"bytes,5,opt,name=connId" json:"connId,omitempty"`
	Cmd     ResStream_Cmd `protobuf:"varint,6,opt,name=cmd,enum=protocol.ResStream_Cmd" json:"cmd,omitempty"`
	Data    []byte        `protobuf:"bytes,7,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *ResStream) Reset()                    { *m = ResStream{} }
func (m *ResStream) String() string            { return proto.CompactTextString(m) }
func (*ResStream) ProtoMessage()               {}
func (*ResStream) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func init() {
	proto.RegisterType((*Req)(nil), "protocol.Req")
	proto.RegisterType((*Res)(nil), "protocol.Res")
	proto.RegisterType((*ReqStream)(nil), "protocol.ReqStream")
	proto.RegisterType((*ResStream)(nil), "protocol.ResStream")
	proto.RegisterEnum("protocol.ResStream_Cmd", ResStream_Cmd_name, ResStream_Cmd_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for Packet service

type PacketClient interface {
	Stream(ctx context.Context, in *ReqStream, opts ...grpc.CallOption) (Packet_StreamClient, error)
	Heartbeat(ctx context.Context, opts ...grpc.CallOption) (Packet_HeartbeatClient, error)
}

type packetClient struct {
	cc *grpc.ClientConn
}

func NewPacketClient(cc *grpc.ClientConn) PacketClient {
	return &packetClient{cc}
}

func (c *packetClient) Stream(ctx context.Context, in *ReqStream, opts ...grpc.CallOption) (Packet_StreamClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Packet_serviceDesc.Streams[0], c.cc, "/protocol.Packet/Stream", opts...)
	if err != nil {
		return nil, err
	}
	x := &packetStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Packet_StreamClient interface {
	Recv() (*ResStream, error)
	grpc.ClientStream
}

type packetStreamClient struct {
	grpc.ClientStream
}

func (x *packetStreamClient) Recv() (*ResStream, error) {
	m := new(ResStream)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *packetClient) Heartbeat(ctx context.Context, opts ...grpc.CallOption) (Packet_HeartbeatClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Packet_serviceDesc.Streams[1], c.cc, "/protocol.Packet/Heartbeat", opts...)
	if err != nil {
		return nil, err
	}
	x := &packetHeartbeatClient{stream}
	return x, nil
}

type Packet_HeartbeatClient interface {
	Send(*Req) error
	Recv() (*Res, error)
	grpc.ClientStream
}

type packetHeartbeatClient struct {
	grpc.ClientStream
}

func (x *packetHeartbeatClient) Send(m *Req) error {
	return x.ClientStream.SendMsg(m)
}

func (x *packetHeartbeatClient) Recv() (*Res, error) {
	m := new(Res)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Packet service

type PacketServer interface {
	Stream(*ReqStream, Packet_StreamServer) error
	Heartbeat(Packet_HeartbeatServer) error
}

func RegisterPacketServer(s *grpc.Server, srv PacketServer) {
	s.RegisterService(&_Packet_serviceDesc, srv)
}

func _Packet_Stream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ReqStream)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PacketServer).Stream(m, &packetStreamServer{stream})
}

type Packet_StreamServer interface {
	Send(*ResStream) error
	grpc.ServerStream
}

type packetStreamServer struct {
	grpc.ServerStream
}

func (x *packetStreamServer) Send(m *ResStream) error {
	return x.ServerStream.SendMsg(m)
}

func _Packet_Heartbeat_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PacketServer).Heartbeat(&packetHeartbeatServer{stream})
}

type Packet_HeartbeatServer interface {
	Send(*Res) error
	Recv() (*Req, error)
	grpc.ServerStream
}

type packetHeartbeatServer struct {
	grpc.ServerStream
}

func (x *packetHeartbeatServer) Send(m *Res) error {
	return x.ServerStream.SendMsg(m)
}

func (x *packetHeartbeatServer) Recv() (*Req, error) {
	m := new(Req)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Packet_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protocol.Packet",
	HandlerType: (*PacketServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Stream",
			Handler:       _Packet_Stream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Heartbeat",
			Handler:       _Packet_Heartbeat_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: fileDescriptor0,
}

func init() { proto.RegisterFile("protocol.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 300 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x91, 0xc1, 0x6a, 0xc2, 0x40,
	0x10, 0x86, 0x5d, 0x63, 0xa2, 0x19, 0xaa, 0x84, 0xb1, 0xd4, 0xc5, 0x93, 0xe4, 0xa4, 0x97, 0x54,
	0x2c, 0xf4, 0x6e, 0xa3, 0x50, 0xa1, 0xb4, 0xb2, 0xe9, 0xa5, 0xc7, 0x35, 0xbb, 0x14, 0x69, 0x93,
	0x35, 0xc9, 0xe2, 0x8b, 0xf4, 0x29, 0xfb, 0x16, 0x25, 0x9b, 0x18, 0x14, 0xbc, 0xf7, 0x36, 0xdf,
	0x37, 0x33, 0xe4, 0x9f, 0x2c, 0x0c, 0x0e, 0xb9, 0xd2, 0x2a, 0x56, 0xdf, 0x81, 0x29, 0xb0, 0x77,
	0x62, 0x7f, 0x04, 0x16, 0x93, 0x19, 0x7a, 0x60, 0x25, 0xc5, 0x27, 0x25, 0x13, 0x32, 0x75, 0x59,
	0x59, 0x56, 0x8d, 0xe2, 0x4a, 0xe3, 0x87, 0x80, 0xcb, 0x64, 0x16, 0xe9, 0x5c, 0xf2, 0x04, 0x29,
	0x74, 0x8f, 0x32, 0x2f, 0xf6, 0x2a, 0x35, 0x33, 0x36, 0x3b, 0x21, 0xde, 0x82, 0xad, 0xd5, 0x61,
	0x1f, 0xd3, 0xb6, 0xd9, 0xad, 0xa0, 0xb4, 0xf2, 0x28, 0x53, 0x4d, 0xad, 0xca, 0x1a, 0x28, 0x6d,
	0x2e, 0xb3, 0x8d, 0xa0, 0x9d, 0xca, 0x1a, 0xc0, 0x3b, 0x70, 0x62, 0x95, 0xa6, 0x1b, 0x41, 0x6d,
	0xa3, 0x6b, 0x42, 0x84, 0x8e, 0xe0, 0x9a, 0x53, 0x67, 0x42, 0xa6, 0x37, 0xcc, 0xd4, 0xfe, 0xaf,
	0x49, 0x55, 0xfc, 0x63, 0xaa, 0x19, 0x58, 0x71, 0x22, 0x4c, 0xa8, 0xc1, 0x62, 0x14, 0x34, 0x7f,
	0xbc, 0x49, 0x15, 0x84, 0x89, 0x60, 0xe5, 0x4c, 0x73, 0x40, 0xf7, 0xec, 0x80, 0x19, 0x58, 0x61,
	0x22, 0xb0, 0x07, 0x9d, 0x68, 0xfd, 0xba, 0xf2, 0x5a, 0xe8, 0x82, 0xcd, 0xd6, 0xdb, 0x97, 0x0f,
	0x8f, 0x60, 0x1f, 0xdc, 0x27, 0xf6, 0xb6, 0x5c, 0x85, 0xcb, 0xe8, 0xdd, 0x6b, 0x2f, 0x32, 0x70,
	0xb6, 0x3c, 0xfe, 0x92, 0x1a, 0x1f, 0xc1, 0xa9, 0x2f, 0x1e, 0x9e, 0x7f, 0xb0, 0x7e, 0x9c, 0xf1,
	0xf0, 0x4a, 0x0a, 0xbf, 0x35, 0x27, 0x78, 0x0f, 0xee, 0xb3, 0xe4, 0xb9, 0xde, 0x49, 0xae, 0xb1,
	0x7f, 0xb1, 0x3a, 0xbe, 0xc0, 0xc2, 0x6f, 0x4d, 0xc9, 0x9c, 0xec, 0x1c, 0xe3, 0x1e, 0xfe, 0x02,
	0x00, 0x00, 0xff, 0xff, 0xfc, 0x89, 0xc6, 0x51, 0x49, 0x02, 0x00, 0x00,
}
